from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
import json
from datetime import datetime

User = get_user_model()


class Command(BaseCommand):
    help = 'Save user credentials to a file'

    def add_arguments(self, parser):
        parser.add_argument(
            '--filename',
            type=str,
            default='user_credentials.json',
            help='Filename to save credentials (default: user_credentials.json)'
        )
        parser.add_argument(
            '--format',
            type=str,
            choices=['json', 'txt'],
            default='json',
            help='Output format (default: json)'
        )

    def handle(self, *args, **options):
        filename = options['filename']
        output_format = options['format']
        

        users = User.objects.filter(is_superuser=False).order_by('username')
        
        if not users.exists():
            self.stdout.write(
                self.style.WARNING('No users found! Run generate_fake_data first.')
            )
            return
        
        credentials = []
        for user in users:
            credentials.append({
                'username': user.username,
                'email': user.email,
                'role': user.role,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'is_verified': user.is_verified,
                'note': 'Password was generated by fake data command'
            })
        
        if output_format == 'json':
            data = {
                'generated_at': datetime.now().isoformat(),
                'total_users': len(credentials),
                'users': credentials
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
                
        else:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"User Credentials - Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("=" * 60 + "\n\n")
                
                for cred in credentials:
                    f.write(f"Username: {cred['username']}\n")
                    f.write(f"Email: {cred['email']}\n")
                    f.write(f"Role: {cred['role']}\n")
                    f.write(f"Name: {cred['first_name']} {cred['last_name']}\n")
                    f.write(f"Verified: {cred['is_verified']}\n")
                    f.write(f"Note: {cred['note']}\n")
                    f.write("-" * 40 + "\n")
        
        self.stdout.write(
            self.style.SUCCESS(f'Credentials saved to {filename}')
        )
        self.stdout.write(f'Total users: {len(credentials)}')

